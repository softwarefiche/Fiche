# Rules in this file were initially inferred by Visual Studio IntelliCode from the D:\Development\Projects\Software Fiche\Fiche\Fiche\ codebase based on best match to current usage at 11-Apr-19
# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.cs]

#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space

#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#place catch statements on a new line
csharp_new_line_before_catch = true
#place else statements on a new line
csharp_new_line_before_else = true
#require finally statements to be on a new line after the closing brace
csharp_new_line_before_finally = true
#require braces to be on a new line for lambdas, methods, types, and control_blocks (also known as "Allman" style)
csharp_new_line_before_open_brace = all #lambdas, methods, types, control_blocks

#Formatting - organize using options

#sort System.* using directives alphabetically, and place them before other usings
dotnet_sort_system_directives_first = true

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements = true

#Style - expression bodied member options

#prefer expression-bodied members for accessors
csharp_style_expression_bodied_accessors = true:suggestion
#prefer block bodies for constructors
csharp_style_expression_bodied_constructors = true:silent
#prefer block bodies for methods
csharp_style_expression_bodied_methods = true:silent
#prefer block bodies for operators
csharp_style_expression_bodied_operators = true:suggestion
#prefer expression-bodied members for properties
csharp_style_expression_bodied_properties = true:suggestion

#Style - expression level options

#prefer out variables to be declared before the method call
csharp_style_inlined_variable_declaration = true:suggestion
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - implicit and explicit types

#prefer explicit type over var to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = false:silent
#prefer explicit type over var when the type is already mentioned on the right-hand side of a declaration
csharp_style_var_when_type_is_apparent = false:silent

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - qualification options

#prefer events not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_event = false:suggestion
#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = true:silent
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:suggestion
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:suggestion

csharp_prefer_braces = false:silent
csharp_style_pattern_matching_over_is_with_cast_check = true
dotnet_style_prefer_is_null_check_over_reference_equality_method  = true
dotnet_style_prefer_conditional_expression_over_assignment = true
dotnet_style_coalesce_expression = true
dotnet_style_null_propagation = true
csharp_style_var_elsewhere = false
csharp_prefer_simple_default_expression  = true
csharp_style_pattern_local_over_anonymous_function = true
csharp_style_throw_expression = false
dotnet_separate_import_directive_groups = true
csharp_new_line_before_members_in_object_initializers = true
csharp_indent_labels = no_change


###############################
# Naming Conventions          #
###############################

# Style Definitions
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.camel_case_style.capitalization = camel_case

# Symbol Definitions

#parameters
dotnet_naming_symbols.parameters.applicable_kinds = parameter

#private_static_methods
dotnet_naming_symbols.private_static_methods.applicable_kinds = method, local_function
dotnet_naming_symbols.private_static_methods.applicable_accessibilities = private
dotnet_naming_symbols.private_static_methods.required_modifiers = static

#private_methods
dotnet_naming_symbols.private_methods.applicable_kinds = method, local_function
dotnet_naming_symbols.private_methods.applicable_accessibilities = private, local

# Naming rules

#parameters_should_be_camel_case
dotnet_naming_rule.parameters_should_be_camel_case.symbols = parameters
dotnet_naming_rule.parameters_should_be_camel_case.style = camel_case_style
dotnet_naming_rule.parameters_should_be_camel_case.severity = suggestion

#private_static_methods_should_be_pascal_case
dotnet_naming_rule.private_static_methods_should_be_pascal_case.symbols = private_static_methods
dotnet_naming_rule.private_static_methods_should_be_pascal_case.style = pascal_case_style
dotnet_naming_rule.private_static_methods_should_be_pascal_case.severity = suggestion

#private_methods_should_be_camel_case
dotnet_naming_rule.private_methods_should_be_camel_case.symbols = private_methods
dotnet_naming_rule.private_methods_should_be_camel_case.style = camel_case_style
dotnet_naming_rule.private_methods_should_be_camel_case.severity = suggestion



# CA1031: Do not catch general exception types
dotnet_diagnostic.CA1031.severity = silent
